<?php declare(strict_types=1);

namespace Paneon\PhpToTypeScript\Parser;

class DeclareInterface
{
    /** @var string */
    protected $name;

    /** @var DeclareInterfaceProperty[] */
    protected $properties = [];

    /**
     * @var string
     */
    protected $prefix = '';

    /**
     * @var string
     */
    protected $suffix = '';

    /**
     * @var int
     */
    protected $indent = 2;

    public function __construct($name)
    {
        $this->name = $name;
    }

    public function addProperty(DeclareInterfaceProperty $property)
    {
        if ($this->indent) {
            $property->setIndentSize($this->indent);
        }
        if ($this->prefix) {
            $property->setPrefix($this->prefix);
        }
        if ($this->suffix) {
            $property->setSuffix($this->suffix);
        }

        $this->properties[] = $property;
    }

    public function __toString()
    {
        $interfaceBody = '';
        $lastKey = count($this->properties) - 1;

        foreach ($this->properties as $key => $property) {
            $interfaceBody .= $property->__toString();

            if ($key !== $lastKey) {
                $interfaceBody .= PHP_EOL;
            }
        }

        $result = <<< HEREDOC
/* This file was automatically generated by the typescript:generate command. */
interface {$this->getName()} {
{$interfaceBody}
}
HEREDOC;
        return $result;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->prefix . $this->name . $this->suffix;
    }

    public function setIndent(int $indent): DeclareInterface
    {
        $this->indent = $indent;
        return $this;
    }

    public function setPrefix(string $prefix): DeclareInterface
    {
        $this->prefix = $prefix;
        return $this;
    }

    public function setSuffix(string $suffix): DeclareInterface
    {
        $this->suffix = $suffix;
        return $this;
    }
}
